@startuml ClassDiagram

' 入力データの検証を行うクラス
abstract class EmployeeInfoValidator {
+ validateLength(value: String, minLength: int, maxLength: int): boolean // 文字列の長さを検証する
+ validateCharacterType(value: String, type: String): boolean // 文字列の文字種を検証する
+ validateFormat(value: String, format: String): boolean // 文字列の形式を検証する
}

' 従業員の名前を管理するクラス。
class Name {
- name : String // 従業員の名前（20文字以内）
+ getName(): String // 名前を取得するメソッド
}

' 従業員のフリガナを管理するクラス。
class Phonetic {
- phonetic : String // 氏名カナ（全角カナ・全角スペース・半角スペースのみ、30文字以内）
+ getPhonetic(): String // 発音を取得するメソッド
}

' 従業員のIDを管理するクラス。
class EmployeeId {
- employeeId : String // 従業員のID（半角英数字）
+ getEmployeeId(): String // 従業員IDを取得するメソッド
}

' 従業員の生年月日を管理するクラス。
class BirthDate {
- birthDate : LocalDate // 従業員の生年月日（YYYY/MM/DD形式）
+ getBirthDate(): LocalDate // 生年月日を取得するメソッド
}

' 従業員の入社日を管理するクラス。
class JoinYearMonth {
- joinYearMonth : YearMonth // 従業員の入社日（YYYY/MM形式）
+ getJoinYearMonth(): YearMonth // 入社日を取得するメソッド
}


' 従業員のエンジニアとしての開始年を管理するクラス。
class EngineerStartYear {
- engineerStartYear : Year // 従業員のエンジニアとしての開始年（YYYY形式）
+ getEngineerStartYear(): Year // 開始年を取得するメソッド
}

' 従業員が扱える言語のリストを管理するクラス。
class Languages {
- languages : List<String>  // 従業員が扱える言語のリスト
+ getLanguages(): List<String> // 扱える言語を取得するメソッド
}

' 従業員の技術スキルを評価するクラス。
class TechnicalSkill {
- technicalSkill : double // 技術スキルの評価（プルダウン五段階評価）
+ getTechnicalSkill(): double // 技術スキル評価を取得するメソッド
}

' 従業員の態度を評価するクラス。
class Attitude {
- attitude : double // 従業員の態度評価（プルダウン五段階評価）
+ getAttitude(): double // 態度評価を取得するメソッド
}

' 従業員のコミュニケーションスキルを評価するクラス。
class CommunicationSkill {
- communicationSkill : double // コミュニケーションスキルの評価（プルダウン五段階評価）
+ getCommunicationSkill(): double // コミュニケーションスキル評価を取得するメソッド
}

' 従業員のリーダーシップを評価するクラス。
class Leadership {
- leadership : double // リーダーシップ評価（プルダウン五段階評価）
+ getLeadership(): double // リーダーシップ評価を取得するメソッド
}

' 従業員の経歴情報を管理するクラス。
class Career {
- career : String // 従業員の経歴情報（改行可能、500文字以内）
+ getCareer(): String // 経歴情報を取得するメソッド
}

' 従業員の研修履歴を管理するクラス。
class TrainingHistory {
- trainingHistory : String // 従業員の研修履歴（改行可能、500文字以内）
+ getTrainingHistory(): String // 研修履歴を取得するメソッド
}

' 従業員に関する備考を管理するクラス。
class Remarks {
- remarks : String // 従業員に関する備考（改行可能、500文字以内）
+ getRemarks(): String // 備考を取得するメソッド
}

' 従業員の情報を管理するクラス。
class EmployeeInfo {
- employeeId : EmployeeId // 従業員ID
- name : Name // 従業員の名前
- phonetic : Phonetic // 従業員の発音
- birthDate : BirthDate // 生年月日
- joinDate : JoinDate // 入社日
- engineerStartYear : EngineerStartYear // エンジニアとしての開始年
- languages : Languages // 扱える言語
- technicalSkill : TechnicalSkill // 技術スキル
- attitude : Attitude // 態度
- communicationSkill : CommunicationSkill // コミュニケーションスキル
- leadership : Leadership // リーダーシップ
- career : Career // 経歴情報
- trainingHistory : TrainingHistory // 研修履歴
- remarks : Remarks // 備考

+ EmployeeInfo(employeeId: EmployeeId, name: Name, phonetic: Phonetic, birthDate: BirthDate, joinDate: JoinDate, engineerStartYear: EngineerStartYear, languages: Languages, technicalSkill: TechnicalSkill, attitude: Attitude, communicationSkill: CommunicationSkill, leadership: Leadership, career: Career, trainingHistory: TrainingHistory, remarks: Remarks) // コンストラクタ
+ toString(): String // オブジェクトの文字列表現を返すためのメソッド
}

' 従業員情報を管理するクラス。
class EmployeeManager {
- employeeList: List<EmployeeInfo>  // 従業員情報のリスト
}

' 新しい従業員を追加するクラス。
class EmployeeAdder {
+ addEmployee(emp: EmployeeInfo): boolean // 新しい従業員を追加するメソッド
}

' 従業員情報を編集するクラス。
class EmployeeEditor {
+ editEmployee(emp: EmployeeInfo): boolean // 従業員情報を編集するメソッド
}

' 従業員を削除するクラス。
class EmployeeDeleter {
+ deleteEmployee(emp: EmployeeInfo): boolean // 従業員を削除するメソッド
}

' CSVファイルの読み書きを行うクラス。
class CSVHandler {
+ readCSV(file: File): List<EmployeeInfo> // CSVファイルから従業員情報を読み込むメソッド
+ writeCSV(employeeList: List<EmployeeInfo>, file: File): boolean // 従業員情報をCSVファイルに書き込むメソッド
}

' ログを管理するクラス。
class EmployeeInfoLogger {
- LOG_FOLDER : String // ログを保存するフォルダのパス
+ createLogFolder(): void // ログフォルダを作成するメソッド
+ logException(exception: Exception): void // 例外をログに記録するメソッド
+ logOutput(message: String): void // 操作の結果をログに記録するメソッド
}

' エラーハンドリングを行うクラス。
class ErrorHandler {
- logger : EmployeeInfoLogger // EmployeeInfoLogger インスタンス
+ handleError(errorMessage: String): void // エラーメッセージを処理するメソッド
+ logException(exception: Exception): void // 例外をログに記録するメソッド
}

' 検索条件を保持するクラス。
class SearchCriteria {
- searchCriteria : Map<String, String> // 検索条件を保持するマップ
+ keywordSearch(): void // キーワードによる検索を実行するメソッド
+ filterSearch(): void // フィルタによる検索を実行するメソッド
}

' 従業員情報を表示するUIクラス。
class ListViewUI {
- employeeTable : JTable // 従業員情報を表示するテーブル
- searchBox : JTextField // 検索ボックス
- deleteButton : JButton // 削除ボタン
- csvExportButton : JButton // CSVエクスポートボタン
- addButton : JButton // 従業員追加ボタン

+ displayEmployees(): void // 従業員情報を表示するメソッド
+ showDeleteDialog(): void // 削除確認ダイアログを表示するメソッド
+ showCSVExportDialog(): void // CSVエクスポート確認ダイアログを表示するメソッド
+ keywordSearch(): void // キーワードに基づいて従業員情報を検索するメソッド
+ filterSearch(): void // 特定の条件に基づいて従業員情報を絞り込むメソッド
}

' 従業員の詳細情報を表示するUIクラス。
class DetailViewUI {
- employeeInfoTable : JTable // 従業員の詳細情報を表示するテーブル
- editButton : JButton // 編集ボタン
- deleteButton : JButton // 削除ボタン
- backButton : JButton // 一覧画面に戻るボタン

+ displayDetail(): void // 詳細情報を表示するメソッド
+ showDeleteDialog(): void // 削除確認ダイアログを表示するメソッド
}

' 従業員情報を追加・編集するUIクラス。
class AddEditUI {
- inputForm : JPanel // 入力フォーム
- saveButton : JButton // 保存ボタン
- cancelButton : JButton // キャンセルボタン

+ inputEmployeeInfo(): void // 従業員情報を入力するメソッド
+ showDiscardDialog(): void // 入力内容を捨てるか確認するダイアログを表示するメソッド
}

' CSVファイルの操作を行うUIクラス。
class CSVUI {
- templateButton : JButton // テンプレートダウンロードボタン
- uploadButton : JButton // CSVアップロードボタン
- confirmButton : JButton // 確認ボタン
- backButton : JButton // 戻るボタン

+ downloadTemplate(): void // テンプレートをダウンロードするメソッド
+ uploadCSV(): void // CSVファイルをアップロードするメソッド
+ showConfirmDialog(): void // 確認ダイアログを表示するメソッド
}

' エラーハンドリングと検索・ソートクラスの関係
ListViewUI --> ErrorHandler : uses
ListViewUI --> SortCriteria : uses
ListViewUI --> SearchCriteria : uses

' クラス間の関係
EmployeeManager --> EmployeeAdder : uses
EmployeeManager --> EmployeeEditor : uses
EmployeeManager --> EmployeeDeleter : uses
ListViewUI --> EmployeeManager : manages
DetailViewUI --> EmployeeInfo : displays
AddEditUI --> EmployeeInfo : edits
CSVUI --> CSVHandler : uses
EmployeeManager --> CSVHandler : uses

' EmployeeInfoLoggerクラスの依存関係
EmployeeManager ..> EmployeeInfoLogger : uses
CSVHandler ..> EmployeeInfoLogger : uses
ErrorHandler ..> EmployeeInfoLogger : uses


' バリデーションクラスとの関係
Name ..> EmployeeInfoValidator : uses
Phonetic ..> EmployeeInfoValidator : uses
EmployeeId ..> EmployeeInfoValidator : uses
BirthDate ..> EmployeeInfoValidator : uses
EngineerStartYear ..> EmployeeInfoValidator : uses
Languages ..> EmployeeInfoValidator : uses
TechnicalSkill ..> EmployeeInfoValidator : uses
Attitude ..> EmployeeInfoValidator : uses
CommunicationSkill ..> EmployeeInfoValidator : uses
Leadership ..> EmployeeInfoValidator : uses
Career ..> EmployeeInfoValidator : uses
TrainingHistory ..> EmployeeInfoValidator : uses
Remarks ..> EmployeeInfoValidator : uses
JoinYearMonth ..> EmployeeInfoValidator : uses

' SortCriteriaとSearchCriteriaの関係
SearchCriteria ..> EmployeeManager : uses

@enduml